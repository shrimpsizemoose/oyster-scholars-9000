package env

import (
	"os"

	"github.com/joho/godotenv"
	"github.com/shrimpsizemoose/trekker/logger"
)

type EnvError struct {
	Key     string
	Message string
}

// –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞, –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É—è –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
func LoadEnv() {
	_ = godotenv.Load()
}

// GetEnvOrDefault("PORT", "8000, "–∏—Å–ø–æ–ª—å–∑—É—é –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
// -> "PORT –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000"
func GetEnvOrDefault(key, defaultValue string, defaultComment string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	if defaultComment != "" {
		logger.Warn.Printf("%s –Ω–µ –∑–∞–¥–∞–Ω, %s: %s", key, defaultComment, defaultValue)
	}
	return defaultValue
}

// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–ª—é—á–∏ –º–∞–ø—ã) –µ—Å—Ç—å
// –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö (–∑–Ω–∞—á–µ–Ω–∏—è –º–∞–ø—ã) –µ—Å–ª–∏ –Ω–µ—Ç
func RequireEnv(requirements map[string]string) {
	var errors []EnvError

	for k, v := range requirements {
		if _, exists := os.LookupEnv(k); !exists {
			errors = append(errors, EnvError{Key: k, Message: v})
		}
	}

	if len(errors) > 0 {
		logger.Error.Printf("–ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è üëá")
		for _, err := range errors {
			if err.Message == "" {
				logger.Error.Printf("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: %v", err.Key)
			} else {
				logger.Error.Printf("%s: %s", err.Key, err.Message)
			}
		}
		os.Exit(1)
	}
}
