package analytics

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/shrimpsizemoose/trekker/logger"
)

type Tracker interface {
	Ping(eventType string, additionalData map[string]string)
	PingStart()
	PingFinish()
}

type Config struct {
	BaseURL       string
	SkipTLS       bool
	CommonData    map[string]string
	SecretHeaders map[string]string
}

type Analytics struct {
	config  Config
	verbose bool
}

func NewAnalytics(config Config) Tracker {
	_, verbose := os.LookupEnv("TREKKER_VERBOSE")
	return &Analytics{
		config:  config,
		verbose: verbose,
	}
}

func (a *Analytics) sendEvent(eventType string, additionalData map[string]string) error {
	data := make(map[string]string)
	for k, v := range a.config.CommonData {
		data[k] = v
	}
	for k, v := range additionalData {
		data[k] = v
	}
	data["event_type"] = eventType
	data["local_datetime"] = time.Now().String()

	jsonData, err := json.Marshal(data)
	if err != nil {
		return fmt.Errorf("error marshaling JSON: %w", err)
	}

	http.DefaultClient.Timeout = 3 * time.Second
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: a.config.SkipTLS}

	req, err := http.NewRequest("POST", a.config.BaseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("error creating request: %w", err)
	}

	for k, v := range a.config.SecretHeaders {
		req.Header.Set(k, v)
	}

	client := &http.Client{Timeout: 3 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		if a.verbose {
			logger.Error.Println(err)
		}
		return fmt.Errorf("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π: —è –Ω–µ —Å–º–æ–≥ —Ç–µ–±—è –ø–æ—Å—á–∏—Ç–∞—Ç—å. –ù–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å, –∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç -- –Ω–∞–ø–∏—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –ø–∂–ª—Å—Ç –∏ –ø—Ä–∏–ª–æ–∂–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç. –°–ø–∞—Å–∏–±–æ üê≥.")
	}
	defer resp.Body.Close()

	if resp.StatusCode == http.StatusUnauthorized {
		if a.verbose {
			logger.Error.Println(resp)
		}
		return fmt.Errorf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞-—Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—Å—ë –≤–≤–æ–¥–∏—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û–∂–∏–¥–∞–ª —Å—Ç–∞—Ç—É—Å 200 OK, –ø–æ–ª—É—á–∏–ª - %s", resp.Status)
	}
	if resp.StatusCode != http.StatusOK {
		if a.verbose {
			logger.Error.Println(resp)
		}
		return fmt.Errorf("–û–π. –Ø –ø—ã—Ç–∞–ª—Å—è —Ç–µ–±—è –ø–æ—Å—á–∏—Ç–∞—Ç—å, –Ω–æ –Ω–µ —Å–º–æ–≥ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å—ë –æ–∫. –ù–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å, –∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç -- –Ω–∞–ø–∏—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –ø–∂–ª—Å—Ç –∏ –ø—Ä–∏–ª–æ–∂–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç. –Ø –æ–∂–∏–¥–∞–ª —Å—Ç–∞—Ç—É—Å 200 OK, –ø–æ–ª—É—á–∏–ª - %s", resp.Status)
	}

	return nil
}

func (a *Analytics) Ping(eventType string, additionalData map[string]string) {
	err := a.sendEvent(eventType, additionalData)
	if a.verbose {
		logger.Warn.Printf("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞: event %s", eventType)
	}
	if err != nil {
		if !a.verbose {
			logger.Warn.Println("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ, –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è –µ—â—ë —Ä–∞–∑ —Å TREKKER_VERBOSE=da")
		}
		logger.Error.Fatalf("Failed to send analytics: %v", err)
	}
}

func (a *Analytics) PingStart() {
	if a.verbose {
		logger.Warn.Println("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç")
	}
	a.Ping("000_lab_start", nil)
}

func (a *Analytics) PingFinish() {
	if a.verbose {
		logger.Warn.Println("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ñ–∏–Ω–∏—à–∏—Ä—É–µ—Ç")
	}
	a.Ping("100_lab_finish", nil)
}
